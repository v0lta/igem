Structure of the code:

simulationwrapper.m define constants and parameters, which are fed into runsimulation.m, a function that take these arguments and runs the appropiate simulation using a modelfast1 object

modelfast1.m is an object class that represents the model. It initializes the bacteria population object as well as field objects (AHL & leucine), updates them, and records the results within a matlab data file. It also keeps track of both the minimum and maximum values of the fields for plotting purposes.

bacteriaPopulationAB.m is an object class that contains the coordinates representing the bacteria, as well as a list of their neighbors. It contains functions to refresh as well as update (only update the coordinates of its neighbors, not look for new neighbors) these neighbor lists. Cell movement is calculated as the sum of the following three effects:
 - calculatechemo(): takes the concentration and gradient of repelling/attracting chemical species and calculates step according to discretized keller-segel model
 - calculaterand(): random step that follows bivariate normal distribution, representing the random movement of bacteria
 - calculatecell(): calculates the movement of bacteria due to its neighbors by a superimposition of spring-like interactions with its neighbors

leucine.m and AHL.m are practically the same classes, just with different names for constants. It contains functions to update the fields according to the PDE: d(AHL)/dt = d^2(AHL)/dx^2 + d^2(AHL)/dx^2 + alpha*rhoA - k1*AHL where rhoA represent the density of bacterium A and k1 the linear degradation constant. Zero flux boundary conditions are used.

analysiswrapper.m defines analysis parameters, such as framerate & scaling for the video and feeds them into runanalysis.m, a function that takes these arguments and runs the appropriate simulation using a fileanalyzer object.

fileanalyzer.m takes the data generated by modelfast1.m and makes videos out of them
